Started by user Jenkins Admin
Obtained jenkins/Jenkinsfile from git https://github.com/Ganeshru/car_trawler_assessment.git
[Pipeline] Start of Pipeline
[Pipeline] node
Agent default-lgnwd is provisioned from template default
---
apiVersion: "v1"
kind: "Pod"
metadata:
  annotations:
    kubernetes.jenkins.io/last-refresh: "1748181364703"
  labels:
    jenkins/jenkins-jenkins-agent: "true"
    jenkins/label-digest: "500b4f18aee87616849e4f4c2435020898e34aa0"
    jenkins/label: "jenkins-jenkins-agent"
    kubernetes.jenkins.io/controller: "http___jenkins_jenkins_svc_cluster_local_8080x"
  name: "default-lgnwd"
  namespace: "jenkins"
spec:
  containers:
  - args:
    - "********"
    - "default-lgnwd"
    env:
    - name: "JENKINS_SECRET"
      value: "********"
    - name: "JENKINS_TUNNEL"
      value: "jenkins-agent.jenkins.svc.cluster.local:50000"
    - name: "JENKINS_AGENT_NAME"
      value: "default-lgnwd"
    - name: "REMOTING_OPTS"
      value: "-noReconnectAfter 1d"
    - name: "JENKINS_NAME"
      value: "default-lgnwd"
    - name: "JENKINS_AGENT_WORKDIR"
      value: "/home/jenkins/agent"
    - name: "JENKINS_URL"
      value: "http://jenkins.jenkins.svc.cluster.local:8080/"
    image: "ganeshru/jenkins-one-agent:latest"
    imagePullPolicy: "IfNotPresent"
    name: "jnlp"
    resources:
      limits:
        memory: "512Mi"
        cpu: "512m"
      requests:
        memory: "512Mi"
        cpu: "512m"
    tty: false
    volumeMounts:
    - mountPath: "/var/run/docker.sock"
      name: "volume-0"
      readOnly: false
    - mountPath: "/home/jenkins/agent"
      name: "workspace-volume"
      readOnly: false
    workingDir: "/home/jenkins/agent"
  hostNetwork: false
  nodeSelector:
    kubernetes.io/os: "linux"
  restartPolicy: "Never"
  serviceAccountName: "default"
  volumes:
  - hostPath:
      path: "/var/run/docker.sock"
    name: "volume-0"
  - emptyDir:
      medium: ""
    name: "workspace-volume"

Running on default-lgnwd in /home/jenkins/agent/workspace/sample-node-app-pipeline
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Declarative: Checkout SCM)
[Pipeline] checkout
Selected Git installation does not exist. Using Default
The recommended git tool is: NONE
No credentials specified
Cloning the remote Git repository
Cloning repository https://github.com/Ganeshru/car_trawler_assessment.git
 > git init /home/jenkins/agent/workspace/sample-node-app-pipeline # timeout=10
Fetching upstream changes from https://github.com/Ganeshru/car_trawler_assessment.git
 > git --version # timeout=10
 > git --version # 'git version 2.39.5'
 > git fetch --tags --force --progress -- https://github.com/Ganeshru/car_trawler_assessment.git +refs/heads/*:refs/remotes/origin/* # timeout=10
 > git config remote.origin.url https://github.com/Ganeshru/car_trawler_assessment.git # timeout=10
 > git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/* # timeout=10
Avoid second fetch
Checking out Revision 0c4f2558c5d4bb9f07f9fbdedbc4019e59c64168 (refs/remotes/origin/main)
 > git rev-parse refs/remotes/origin/main^{commit} # timeout=10
 > git config core.sparsecheckout # timeout=10
 > git checkout -f 0c4f2558c5d4bb9f07f9fbdedbc4019e59c64168 # timeout=10
Commit message: "fix lint"
 > git rev-list --no-walk 13f24a638271f3535469a4530f4f5048b0ef247e # timeout=10
[Pipeline] }
[Pipeline] // stage
[Pipeline] withEnv
[Pipeline] {
[Pipeline] withEnv
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Checkout)
[Pipeline] checkout
Selected Git installation does not exist. Using Default
The recommended git tool is: NONE
No credentials specified
Fetching changes from the remote Git repository
Checking out Revision 0c4f2558c5d4bb9f07f9fbdedbc4019e59c64168 (refs/remotes/origin/main)
Commit message: "fix lint"
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Lint)
[Pipeline] sh
+ echo Container started successfully!
Container started successfully!
[Pipeline] sh
 > git rev-parse --resolve-git-dir /home/jenkins/agent/workspace/sample-node-app-pipeline/.git # timeout=10
 > git config remote.origin.url https://github.com/Ganeshru/car_trawler_assessment.git # timeout=10
Fetching upstream changes from https://github.com/Ganeshru/car_trawler_assessment.git
 > git --version # timeout=10
 > git --version # 'git version 2.39.5'
 > git fetch --tags --force --progress -- https://github.com/Ganeshru/car_trawler_assessment.git +refs/heads/*:refs/remotes/origin/* # timeout=10
 > git rev-parse refs/remotes/origin/main^{commit} # timeout=10
 > git config core.sparsecheckout # timeout=10
 > git checkout -f 0c4f2558c5d4bb9f07f9fbdedbc4019e59c64168 # timeout=10
+ yamllint k8s/
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Test)
[Pipeline] dir
Running in /home/jenkins/agent/workspace/sample-node-app-pipeline/app
[Pipeline] {
[Pipeline] sh
+ npm install

added 69 packages, and audited 70 packages in 3s

14 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities
[Pipeline] sh
+ npm test

> sample-node-app@1.0.0 test
> echo "No tests yet" && exit 0

No tests yet
[Pipeline] }
[Pipeline] // dir
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Build Docker Image)
[Pipeline] script
[Pipeline] {
[Pipeline] echo
Building Docker image sample-node-app:31...
[Pipeline] isUnix
[Pipeline] withEnv
[Pipeline] {
[Pipeline] sh
+ docker build -t sample-node-app:31 ./app
#0 building with "default" instance using docker driver

#1 [internal] load build definition from Dockerfile
#1 transferring dockerfile: 150B done
#1 DONE 0.0s

#2 [internal] load metadata for docker.io/library/node:18-alpine
#2 DONE 1.0s

#3 [internal] load .dockerignore
#3 transferring context: 2B done
#3 DONE 0.0s

#4 [1/5] FROM docker.io/library/node:18-alpine@sha256:8d6421d663b4c28fd3ebc498332f249011d118945588d0a35cb9bc4b8ca09d9e
#4 DONE 0.0s

#5 [internal] load build context
#5 transferring context: 2.33MB 0.0s done
#5 DONE 0.0s

#6 [3/5] COPY package*.json ./
#6 CACHED

#7 [4/5] RUN npm install
#7 CACHED

#8 [2/5] WORKDIR /app
#8 CACHED

#9 [5/5] COPY . .
#9 CACHED

#10 exporting to image
#10 exporting layers done
#10 writing image sha256:7497eb8af54d72777e0f103f00f18c919acb5d32d68b20aff4fe7f9d7b07a19a done
#10 naming to docker.io/library/sample-node-app:31 done
#10 DONE 0.0s
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] echo
Docker image built.
[Pipeline] }
[Pipeline] // script
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Deploy to Minikube EKS Namespace)
[Pipeline] script
[Pipeline] {
[Pipeline] echo
Deploying Kubernetes resources to minikube in 'sample-app' namespace.
[Pipeline] sh
+ kubectl create namespace sample-app --dry-run=client -o yaml
+ kubectl apply -f -
namespace/sample-app configured
[Pipeline] sh
+ kubectl apply -f k8s/deployment.yaml -n sample-app
deployment.apps/sample-node-app-deployment unchanged
[Pipeline] sh
+ kubectl apply -f k8s/service.yaml -n sample-app
service/sample-node-app-service unchanged
[Pipeline] sh
+ kubectl apply -f k8s/ingress.yaml -n sample-app
ingress.networking.k8s.io/sample-node-app-ingress unchanged
[Pipeline] sh
+ kubectl apply -f k8s/configmap.yaml -n sample-app
configmap/app-config unchanged
[Pipeline] sh
+ kubectl apply -f k8s/secret.yaml -n sample-app
secret/app-secret unchanged
[Pipeline] echo
Simulated deploy to minikube EKS.
[Pipeline] }
[Pipeline] // script
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Helm Deploy (Optional, for staging/production pipelines))
[Pipeline] script
[Pipeline] {
[Pipeline] echo
Simulating Helm deployment for staging/production environments.
[Pipeline] echo
Helm command would be: helm upgrade --install sample-node-app ./helm-chart -n jenkins --values ./helm-chart/values.yaml
[Pipeline] }
[Pipeline] // script
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Notify)
[Pipeline] echo
Simulating Slack/email notification.
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Declarative: Post Actions)
[Pipeline] echo
Pipeline completed.
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // node
[Pipeline] End of Pipeline
Finished: SUCCESS
